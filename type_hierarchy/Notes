Type Hierarchy

Numbers 

Integral 
1. Integers 
2. Booleans 

Non-Integral 
1. Floats (c doubles)
2. Decimals 
3. Complex 
4. Fractions

Collections 

Sequences:
	- Mutables 
		1. Lists 

	- Immutable
		1. Tuples
		2. Strings

Sets:
	- Mutable
		1. Sets 
	
	- Immutable 
		1. Frozen Sets 

Mappings:
	1. Dictionaries


Callables (anything that you can invoke or call)
1. User-Defined Functions
2. Generators
3. Classes
4. Instance Methods
5. Class Instances(__call__())
6. Built-in Functions (e.g. len(), open())
7. Built-in Methods (e.g. my_list.append(x))

Singletons
1. None
2. NotImplemented
3. Ellipsis(...)


Multiline Commments 
- Physical lines of code end with a physical newline character. 
- Logical lines of code end with a logical NEWLINE token
- tokenized

Physical vs Logical Newline:
Sometimes, physical newlines are ignored in order to combine multiple 
physical lines into a single logical line of code terminated by a logical
NEWLINE token. 

Conversion can be implicit or explicit. 

Implicit:
list literals: []
tuplie literals: ()
dictionary literals: {}
set literals: {}
function arguments / parameters 
* support inline comments.

List literals: 
[1,
 2, 
 3]

 [1, #item 1
  2, #item 2
	3  #item 3
 ]

 def my_func(a,
             b, # comment
						 c: ):
	print(a, b, c)

Explicit: 
You can break up statements over multiple lines explicitly, by using the \ (backslash) character. 
Multiline statements are not implicitly converted to a single logical line. 

# Will NOT work!!
if a 
   and b 
	 and c: 

# Will work: 
if a \ 
   and b \ 
	 and c:

* Comments cannot be a part of a statement, not even a multi-line statement in the explicit. 

# Will Not work: 
if a \ 
   and b \ # comment 
	 and c:


Multi-Line String literals: 
'''

'''

or 

"""

"""

'''This is 
a multiline string'''


Variable Names

_ Convention to indicate 'internal use' or 'private' objects. Objects named this way will not get imported by a statement such as:
from module import *

__ Used to mangle class attributes - useful in inheritance chains

__my__ Used for system-defined names that have a special meaning to the interpreter. Don't invent them, stick to the ones pre-defined by Python.

Other Variable Naming Conventions

Packages - short, all-lowercase names. Preferably no underscores. 
Modules - short, all-lowercase names. Can have underscores.
Classes - CapWords (upper camel case) convention.
Functions - lowercase, words separated by underscores (snake_case).
Variables - lowercase, words separated by underscores (snake_case).
Constants - All uppercase, words separated by underscores.
